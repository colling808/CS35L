
Getting Started

w g e t SP < u r l >

c p SP a s s i g n 1 . h t m l SP e x e r 1 . h t m l

c p SP a s s i g n 1 . h t m l SP e x e r 2 . h t m l

c p SP a s s i g n 1 . h t m l SP e x e r 3 . h t m l

l s


1.1

C-s A S C I I
ENTER
C-s I n s t r u c t i o n s
ENTER
C-r H T M L
ENTER
C-s h u n t
ENTER
C-r h u n t
ENTER
C-e
C-a
M-<

10. utilize the search and mobile shortcuts in emacs to navigate
faster and with less keystrokes.

C-x C-c

1.2

M-x g o t o - l i n e
ENTER
1 8
ENTER
C-k
C-s D E L
ENTER
C-a
C-k
C-s w i k i
C-s
C-a
C-p
C-k
C-k
C-k
C-k
C-k
C-s < !
C-b
C-b
M-d
< / p

C-x C-c

1.3

C-s A s s i g n m e n t SP 1
ENTER
DEL
3 7
C-s
M-n
ENTER
DEL
3 7
C-s U T F - 8
C-f
C-d
C-d
C-d
C-d
S - A S C I I
C-s < o l >
ENTER
ENTER

C-x C-s
C-x C-c

1.4

M->
C-p
C-p
C-p
C-p
M-w
M-x g o t o - l i n e
3 3 3
C-y
ENTER
C-k
M->
C-r < !
ENTER
M-h
C-w
M-x g o t o - l i n e
2 9 6
C-y
C-b //deleting the extra + and -'s
DEL
C-p
C-d
C-p
C-d
C-p
C-d
C-s < !
C-s
ENTER
C-b
C-b
C-k
M-x g o t o - l i n e
1 5
C-y
C-s < !
C-s
C-b
C-b
C-k
M-x g o t o - l i n e
8 9
C-y
C-s @ @  // i assume this is where the diff starts
ENTER
C-SP
M->
C-w
C-x u //undo!
- - >
C-r @ @
C-r
C-r
C-r
C-r
C-r
C-r
C-r
ENTER
< ! - -
M-<
M-%
< o l >
ENTER
< O L >
y
y
y
y
y
y
y // replaced 7 occurences

C-x C-s
C-x C-c

1.5

e m a c s
M-x m a k e - d i r e c t o r y
j u n k
ENTER
C-x C-f
j u n k / h e l l o . c
ENTER
// insert c function
C-x C-s
C-x C-c
e m a c s
M-! c h m o d SP u + x SP / j u n k / h e l l o . c
//add executable permission
ENTER
M-x c o m p i l e
ENTER
~ / j u n k / h e l l o . c
ENTER
M-!
c a t SP < h e l l o . c | s o r t > h e l l o - o u t
ENTER

{
}
  char b = '\\';
    char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c
    char n = '%cn';%c char b = '%c%c';%c char\
     q = '%c';%c char const *p = %c%s%c;%c printf (p, n, n, n,
     n, b, n, b, b, n, q, n, q, p, q, n, n, n, n)\
     ;%c return 0;%c}%c";
       char n = '\n';
         char q = '"';
	 #include <stdio.h>
	 int
	 main (void)
	   printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
	     return 0;




1.6

C-x b
( e v a l - p r i n t - l a s t - s e x p )
C-j
( s e t q SP x SP ( r a n d o m ) )
C-j
( s e t q SP y SP ( r a n d o m ) )
C-j
( s e t q SP z SP ( r a n d o m ) )
C-j
( * SP x SP y SP z )
C-j

// The result does not seem accurate:
//-290184189199610594
// probably overflowed.

M-:
( * SP x SP y SP z )
// The answer looks like it is given in hex

//Random integers are not truly random
//rather pseudo-random, as the computer
//typically uses an algorithm to pick the
// numbers randomly.
